// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/trebuchet-org/treb-cli/internal/adapters"
	"github.com/trebuchet-org/treb-cli/internal/adapters/abi"
	"github.com/trebuchet-org/treb-cli/internal/adapters/anvil"
	"github.com/trebuchet-org/treb-cli/internal/adapters/blockchain"
	"github.com/trebuchet-org/treb-cli/internal/adapters/forge"
	"github.com/trebuchet-org/treb-cli/internal/adapters/fs"
	"github.com/trebuchet-org/treb-cli/internal/adapters/repository/contracts"
	"github.com/trebuchet-org/treb-cli/internal/adapters/repository/deployments"
	"github.com/trebuchet-org/treb-cli/internal/adapters/resolvers"
	"github.com/trebuchet-org/treb-cli/internal/adapters/template"
	"github.com/trebuchet-org/treb-cli/internal/adapters/verification"
	"github.com/trebuchet-org/treb-cli/internal/cli/interactive"
	"github.com/trebuchet-org/treb-cli/internal/cli/render"
	"github.com/trebuchet-org/treb-cli/internal/config"
	"github.com/trebuchet-org/treb-cli/internal/logging"
	"github.com/trebuchet-org/treb-cli/internal/usecase"
)

// Injectors from wire.go:

// InitApp creates a fully wired App instance with viper configuration
func InitApp(v *viper.Viper, cmd *cobra.Command, sink usecase.ProgressSink) (*App, error) {
	runtimeConfig, err := config.Provider(v)
	if err != nil {
		return nil, err
	}
	selectorAdapter, err := interactive.NewSelectorAdapter(runtimeConfig)
	if err != nil {
		return nil, err
	}
	logger := logging.NewLogger(runtimeConfig)
	fileRepository, err := deployments.NewFileRepositoryFromConfig(runtimeConfig, logger)
	if err != nil {
		return nil, err
	}
	listDeployments := usecase.NewListDeployments(runtimeConfig, fileRepository, sink)
	deploymentResolver := resolvers.NewDeploymentResolver(runtimeConfig, fileRepository, selectorAdapter)
	showDeployment := usecase.NewShowDeployment(runtimeConfig, fileRepository, deploymentResolver, sink)
	string2 := adapters.ProvideProjectPath(runtimeConfig)
	repository := contracts.NewRepository(string2)
	contractResolver := resolvers.NewContractResolver(runtimeConfig, repository, selectorAdapter)
	eventParser := abi.NewEventParser(string2, logger)
	abiResolver := abi.NewABIResolver(runtimeConfig, repository, fileRepository)
	scriptGeneratorAdapter, err := template.NewScriptGeneratorAdapter(runtimeConfig, eventParser, abiResolver)
	if err != nil {
		return nil, err
	}
	fileWriterAdapter, err := fs.NewFileWriterAdapter(runtimeConfig)
	if err != nil {
		return nil, err
	}
	generateDeploymentScript := usecase.NewGenerateDeploymentScript(runtimeConfig, contractResolver, eventParser, abiResolver, scriptGeneratorAdapter, fileWriterAdapter, sink)
	networkResolver := config.ProvideNetworkResolver(runtimeConfig)
	listNetworks := usecase.NewListNetworks(networkResolver)
	checkerAdapter := blockchain.NewCheckerAdapter()
	pruner := deployments.NewPruner(fileRepository, checkerAdapter)
	pruneRegistry := usecase.NewPruneRegistry(networkResolver, checkerAdapter, pruner, fileRepository, sink)
	localConfigStoreAdapter := fs.NewLocalConfigStoreAdapter(runtimeConfig)
	showConfig := usecase.NewShowConfig(localConfigStoreAdapter)
	setConfig := usecase.NewSetConfig(localConfigStoreAdapter)
	removeConfig := usecase.NewRemoveConfig(localConfigStoreAdapter)
	scriptResolver := resolvers.NewScriptResolver(string2, contractResolver)
	parameterResolver := resolvers.NewParameterResolver(runtimeConfig, fileRepository, repository)
	sendersManager := config.NewSendersManager(runtimeConfig)
	runResultHydrator, err := forge.NewRunResultHydrator(string2, eventParser, repository, logger)
	if err != nil {
		return nil, err
	}
	libraryResolver := resolvers.NewLibraryResolver(fileRepository)
	forgeAdapter := forge.NewForgeAdapter(string2, logger)
	runScript := usecase.NewRunScript(runtimeConfig, scriptResolver, parameterResolver, sendersManager, runResultHydrator, fileRepository, libraryResolver, sink, forgeAdapter)
	verifierAdapter, err := verification.NewVerifierAdapter(runtimeConfig)
	if err != nil {
		return nil, err
	}
	verifyDeployment := usecase.NewVerifyDeployment(fileRepository, verifierAdapter, networkResolver)
	orchestrateDeployment := usecase.NewOrchestrateDeployment(runScript, sink)
	syncRegistry := usecase.NewSyncRegistry(runtimeConfig, fileRepository, sink)
	tagDeployment := usecase.NewTagDeployment(fileRepository, deploymentResolver, sink)
	manager := anvil.NewManager()
	manageAnvil := usecase.NewManageAnvil(manager, sink)
	initProject := usecase.NewInitProject(fileWriterAdapter, sink)
	renderer := render.NewGenerateRenderer()
	writer := render.ProvideIO(cmd)
	scriptRenderer := render.NewScriptRenderer(writer, fileRepository, abiResolver, logger)
	app, err := NewApp(runtimeConfig, selectorAdapter, listDeployments, showDeployment, generateDeploymentScript, listNetworks, pruneRegistry, showConfig, setConfig, removeConfig, runScript, verifyDeployment, orchestrateDeployment, syncRegistry, tagDeployment, manageAnvil, initProject, manager, renderer, scriptRenderer)
	if err != nil {
		return nil, err
	}
	return app, nil
}
